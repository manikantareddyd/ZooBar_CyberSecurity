## Place your answers here.

Part 1

exploit-2a.py exploits [http.c:65]. This leads to an overflow in the local buffer 'buf' which has been used to reqrite the return address of the function 'http_request_line". This crashes the server.

exploit-2b.py exploits [http.c:274]. The insecure use of strcat has provided us with a way to overwrite a function pointer by name 'handler'. The way the program is written we are sure that 'handler' will be called. But the value of handler being 0x41414141, the system crashes with a SIGSEV. 

Part 2

[http.c:65] Shellcode injection possible, but we have to be careful with the 'envp' value, as its corruption can lead to segmentation fault.

[http.c:397] This vulnerability/bug cannot be exploited by a client side attack.

[http.c:274] Shellcode injection possible. It can be done either by rewriting the return address or the function pointer 'handler'. But we have to be careful that the program doesn't terminate before it reaches here.

[http.c:88][http.c:94] Shellcode injection is possible by overflowing 'envp'. But these exploits would be extremely tedious considering the amount of precision required to maitain other addresses intact. 

exploit-3.py exploits [http.c:121]. We overflow the local buffer with a combination of nops, shellcode and padding and rewrite the return address of the 'http_request_headers' function to execute our custom shellcode.


Part 4

Exercise 5:

1. One of the core issues of a server based architecture is their susceptibility to Denial of Service attacks. It is usually the case that the server infrastructure has a provision to detect and supress DOS attacks. This is an architectural design problem. Simply put zoobar can be crashed by sending many requests simultaneously. It'll fork many threads and eventually the physical resources run out and the system crashes.

Can be contained by implemeting load balancers that shed the server stress to other systems. Even this doesn't fix the problem. 
Block malicious senders. 

2. Accessing sensitive information. The way the server code handles requests, we can serve anyfile. Moreover the system being linux based any file can be requested by correctly formatting the path. In other words zoobar server isn't contained. It makes the rest of the system vulnerable. exploit-filepath.py highlight such an attack. 

3. Executig remote jobs. To make things more interesting, anyfile can be executed. exploit-filerun.py execute this. Zoobar is privilieged to execute scripts beyond its realm. It isn't sandboxed from other process.  

2 & 3 can be prevented by setting up priviliege seperation. Allow zoobar to access files only that it is allowed to. 